import numpy as np
import matplotlib.pyplot as plt

# Sampling setup
fs = 1000  # Sampling frequency in Hz
T = 1      # 1 second duration
N = int(T * fs)
t = np.arange(N) / fs

# Generate signals manually
# (a) 10 Hz sine wave
a = np.sin(2 * np.pi * 10 * t)

# (b) 10 Hz square wave using sign of sine
b = []
for i in range(len(t)):
    if np.sin(2 * np.pi * 10 * t[i]) >= 0:
        b.append(1)
    else:
        b.append(-1)
b = np.array(b)

# (c) 20 Hz sine wave
c = np.sin(2 * np.pi * 20 * t)

# Manual correlation function
def manual_correlation(x, y):
    N = len(x)
    corr = []
    for lag in range(-N + 1, N):
        val = 0
        for i in range(N):
            j = i - lag
            if 0 <= j < N:
                val += x[i] * y[j]
        corr.append(val)
    return np.array(corr)

# Compute correlations
auto_a = manual_correlation(a, a)
cross_ab = manual_correlation(a, b)
cross_ac = manual_correlation(a, c)
lags = np.arange(-N + 1, N)

# Plotting
plt.figure(figsize=(12, 6))

plt.subplot(3, 1, 1)
plt.plot(lags, auto_a)
plt.title('Autocorrelation of 10 Hz Sine')
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(lags, cross_ab)
plt.title('Cross-correlation between 10 Hz Sine and 10 Hz Square')
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(lags, cross_ac)
plt.title('Cross-correlation between 10 Hz Sine and 20 Hz Sine')
plt.grid()

plt.tight_layout()
plt.show()
