import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import firwin, lfilter

# Step 1: Create a sample signal
fs = 5000  # Sampling frequency
t = np.arange(0, 1.0, 1/fs)  # 1 second duration

# Signal = 100 Hz sine wave + 1000 Hz noise
signal_clean = np.sin(2 * np.pi * 100 * t)
noise = 0.5 * np.sin(2 * np.pi * 1000 * t)
signal_noisy = signal_clean + noise

# Step 2: Design a Low Pass FIR Filter using firwin
numtaps = 101  # Number of filter coefficients (filter order + 1)
cutoff_hz = 200  # Cutoff frequency of the filter in Hz

# FIR Filter design using Hamming window
lpf = firwin(numtaps, cutoff=cutoff_hz, window="hamming", fs=fs)

# Step 3: Apply filter using convolution (lfilter or np.convolve)
filtered_signal = np.convolve(signal_noisy, lpf, mode='same')

# Step 4: Plot the result
plt.figure(figsize=(14, 6))

plt.subplot(3, 1, 1)
plt.plot(t, signal_noisy, label='Noisy Signal')
plt.title("Original Signal with High-Frequency Noise")
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(t, filtered_signal, color='green', label='Filtered Signal')
plt.title("Filtered Signal (Low Pass Applied)")
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(t, signal_clean, color='orange', label='Original Clean Signal')
plt.title("Original Clean Signal for Comparison")
plt.grid()

plt.tight_layout()
plt.show()
